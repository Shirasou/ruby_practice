# 下記2点は同じ意味
# validates :phone_number, format: { with: /\A\d+-\d+-\d+\z/ }
# validates :phone_number, format: { with: /^\d+-\d+-\d+$/ }
# Rails4以降では ^ または $ を使用するとセキュリティリスクになるとエラーが起きる

text = <<-TEXT
Call me, 03-1234-5678
TEXT

puts text.scan /\d+-\d+-\d+/
# ^ と $ を追加することで「最初から最後まで \d+-\d+-\d+ に合致する文字列」のみに限定できる。


dangerous_phone_number = <<-TEXT
<script>alert('XSS!!');</script>
03-1234-5678
TEXT

# ^ は「行頭」を意味するメタ文字
# $ は「行末」を意味するメタ文字
# ^ と $ では複数行テキストが渡されると意図しない入力値をパスさせてしまう
puts dangerous_phone_number.scan /^\d+-\d+-\d+$/

# \A は「文字列の先頭」を意味するメタ文字
# \z は「文字列の末尾」を意味するメタ文字
puts dangerous_phone_number.scan /\A\d+-\d+-\d+\z/

# ^ と $ では怪しい複数行の入力値をバリデーションエラーにすることができないためエラーが起きる
# 下記で意図的にエラーをパスすることは可能
# validates :phone_number, format: { with: /^\d+-\d+-\d+$/, multiline: true }


# \z \Z の違い
# \Z は「文字列の末尾にマッチします。 ただし文字列の最後の文字が改行ならばそれの手前にマッチします。」を表すメタ文字
# \z は「文字列の末尾にマッチします。」
# 「文字列の末尾が改行文字で終わっても許可するのが大文字の \Z」


# まとめ
# Rubyでは ^ や $ は「行頭」「行末」に意味になる。そのため、本来パスさせるべきでない複数行テキストをパスさせてしまうことがある。
# \A や \z を使うと「文字列の先頭」「文字列の末尾」の意味になるため、意図しない複数行テキストの入力をNGとすることができる。
# \Z は \z とよく似ているが、「文字列の末尾が改行文字で終わってもOK」という点が異なる。
# \A や \z が使えるかどうかは言語によって異なる。たとえばJavaScriptでは \A や \z に特殊な意味はない（ただの文字として扱われる）。
# Rubyとは異なり、JavaScriptのデフォルトでは ^ と $ が「文字列の先頭」「文字列の末尾」の意味になる。このように言語や環境によってメタ文字の意味が微妙に異なる場合がある。