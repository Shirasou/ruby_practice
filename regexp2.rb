# 表記の違いの許容
text = <<-TEXT
クープバゲットのパンは美味しかった。
今日はクープ バゲットさんに行きました。
クープ　バゲットのパンは最高。
ジャムおじさんのパン、ジャムが入ってた。
また行きたいです。クープ・バゲット。
クープ・バケットのパン、売り切れだった（><）
TEXT

# .は「任意の1文字」を表すメタ文字（[ 　・]と記入してもOK）
# ?は「〜が1文字、または無し」を表すメタ文字
puts text.split(/\n/).grep(/クープ.?バ[ゲケ]ット/)

# HTMLタグをCSVへ変換する
html = <<-HTML
<select name="game_console">
<option value="none"></option>
<option value="wii_u">Wii U</option>
<option value="ps4">プレステ4</option>
<option value="gb">ゲームボーイ</option>
</select>
HTML

# +は「直前の文字が1文字以上」を表すメタ文字
# <\/option>のバックスラッシュ(\)はスラッシュ(/)をエスケープするためのエスケープ文字
# RubyやJavaScriptでは/abc/のようにスラッシュを使って正規表現オブジェクトを作成するため
# 正規表現に()を使うことで、その部分がキャプチャ（捕捉）され、連番が付けられる
# *は「直前の文字が0文字以上」を表すメタ文字
# ?を2文字以上も文字列に使用する場合は、()で囲みグループ化すること。
# ()内に?:をつけることでキャプチャ対象から外すことができる。
# $1と$2はそれぞれキャプチャされた１番目と２番目を表す
replaced = html.gsub(/<option value="([a-z0-9_]+)"(?: selected)?>(.*)<\/option>/, '\1\2')
puts replaced

# リファクタリング
# [0-9]は\dと同じに意味
# [a-z\d_]は「英単語を構成する文字」を表す\wに置き換えることができる
replaced = html.gsub(/<option value="(\w+)"(?: selected)?>(.*)<\/option>/, '\1\2')
puts replaced

html2 = <<-HTML
<select name="game_console">
<option value="none"></option>
<option value="wii_u">Wii U</option><option value="ps4">プレステ4</option>
<option value="gb">ゲームボーイ</option>
</select>
HTML

# リファクタリング
# >(.*)<の部分が「>で始まり、任意の文字が0個以上連続し(.*)、最後に見つかった<で終わる」という意味でoptionタグが改行せずに複数重なった場合、不完全
# +や*はパターンとして結果に矛盾がなければ（貪欲に）最長のマッチを返すため。
# [^A]は「A以外の任意の文字」を表すメタ文字
# [^AB]は「AではなくBでもない任意の文字」を表すメタ文字
replaced = html2.gsub(/<option value="(\w+)"(?: selected)?>([^<]*)<\/option>/, '\1\2')
puts replaced
# 「>で始まり、任意の文字が0個以上連続し(.*)、最初に見つかった<で終わる」という意味に変更する
# *?や+?にすると最長ではなく、最短のマッチを結果として返してくれる（最小量指定子）
replaced = html2.gsub(/<option value="(\w+)"(?: selected)?>(.*?)<\/option>/, '\1\2')
puts replaced


# まとめ
# ? は「直前の文字が1個、または無し」を表す
# . は「任意の1文字」を表す
# + は「直前の文字が1個以上」を表す
# * は「直前の文字が0個以上」を表す
# ( ) はマッチする部分をキャプチャ（捕捉）する
# キャプチャした部分は置換するときに $1 や \1 で参照できる
# \w は「英単語を構成する文字（半角英数字とアンダースコア）」を表す
# [^AB] は「AでもなくBでもない任意の1文字」を表す
# 正規表現中の特別な文字は \ でエスケープする
# ( ) はキャプチャだけでなく、グループ化にも使われる
# (ABC)? は「文字列 ABC があり、または無し」を表す
# (?: ) はキャプチャ無しでグループ化する場合に使う
# * と + は「貪欲」で最長マッチを返すため、使い方を誤ると思いがけない結果が返る
# *? や +? にすると、最短マッチを返す
# テキストエディタで重要なテキストを置換する際は、ひとつずつ確認しながら置換する